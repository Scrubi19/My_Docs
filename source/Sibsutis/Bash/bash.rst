
BASH
~~~~~~~

BASH — Bourne-Again SHell (что может переводится как «перерожденный шел», или «Снова шел Борна(создатель sh)»), самый популярный командный интерпретатор в юниксоподобных системах, в особенности в GNU/Linux

.. warning::

  Любой bash-скрипт должен начинаться со строки
  **#!/bin/bash**
  *в этой строке после #! указывается путь к bash-интерпретатору, поэтому если он у вас установлен в другом месте(где, вы можете узнать набрав `whereis bash`) поменяйте её на ваш путь.*


Команды 
""""""""""

.. code-block:: bash

  echo     # вывод аргументов, разделенных пробелами, на стандартное устройство вывода  
  exit     # выход из оболочки  
  break    # выход из цикла for, while или until  
  continue # выполнение следующей итерации цикла for, while или until  
  export   # отмечает аргументы как переменные для передачи в дочерние процессы в среде  
  hash     # запоминает полные имена путей команд, указанных в качестве аргументов, чтобы не искать их при следующем обращении  
  kill     # посылает сигнал завершения процессу  
  pwd      # выводит текущий рабочий каталог  
  read     # читает строку из ввода оболочки и использует ее для присвоения значений указанным переменным.\  
  return   # заставляет функцию оболочки выйти с указанным значением  
  shift    # перемещает позиционные параметры налево  
  test     # вычисляет условное выражение  
  times    # выводит имя пользователя и системное время, использованное оболочкой и ее потомками  
  trap     # указывает команды, которые должны выполняться при получении оболочкой сигнала  
  unset    # вызывает уничтожение переменных оболочки  
  wait     # ждет выхода из дочернего процесса и сообщает выходное состояние.  


Переменные и параметры скрипта
""""""""""""""""""""""""""""""""

.. code-block:: bash

  #присваиваем переменной parametr1 значение первого параметра скрипта  
  parametr1=$1
  #присваиваем переменной script_name значение имени скрипта  
  script_name=$0
  # обращение к переменным осуществляется через $имя_переменной.  
  echo "Вы запустили скрипт с именем $script_name и параметром $parametr1"
  # в одинарных кавычках не происходит подстановки переменных.  
  echo 'Вы запустили скрипт с именем $script_name и параметром $parametr1'

Зарезервированные переменные
""""""""""""""""""""""""""""""

.. code-block:: bash

  $DIRSTACK   # содержимое вершины стека каталогов  
  $EDITOR     # текстовый редактор по умолчанию  
  $EUID       # Эффективный UID. Если вы использовали программу su для выполнения команд от другого пользователя, то эта переменная содержит UID этого пользователя, в то время как...  
  $UID        # содержит реальный идентификатор, который устанавливается только при логине.  
  $FUNCNAME   # имя текущей функции в скрипте.  
  $GROUPS     # массив групп к которым принадлежит текущий пользователь  
  $HOME       # домашний каталог пользователя  
  $HOSTNAME   # ваш hostname  
  $HOSTTYPE   # архитектура машины.  
  $LC_CTYPE   # внутренняя переменная, котороя определяет кодировку символов  
  $OLDPWD     # прежний рабочий каталог  
  $OSTYPE     # тип ОС  
  $PATH       # путь поиска программ  
  $PPID       # идентификатор родительского процесса  
  $SECONDS    # время работы скрипта(в сек.)  
  $#          # общее количество параметров переданных скрипту  
  $*          # все аргументы переданыне скрипту(выводятся в строку)  
  $@          # тоже самое, что и предыдущий, но параметры выводятся в столбик  
  $!          # PID последнего запущенного в фоне процесса  
  $$          # PID самого скрипта 
  $?          # результат последней выполненной команды


Условия
"""""""""""

.. code-block:: bash

  if [[ "$?" -eq "if" ]]; then
      echo "if something"
  else  
      echo "else something" 
  if


Для построения многоярусных условий вида:

.. code-block:: bash

  if [[ "$?" -eq "if" ]]; then
      echo "if something"
  elif [[ "$?" -eq "if" ]]; then
      echo "elif something" 
  else
      echo "else something"  
  if

Switch Case
""""""""""""""

Если необходимо сравнивать какую-то одну переменную с большим количеством параметров, то целесообразней использовать оператор case.


.. code-block:: bash


  read doing

  case $doing in
    1)
      /usr/bin/nano` # если $doing содержит 1, то запустить nano  
    ;;

    2)
      /usr/bin/vi` # если $doing содержит 2, то запустить vi  
    ;;

    3)
      /usr/bin/emacs` # если $doing содержит 3, то запустить emacs  
    ;;

    4)
      exit 0
    ;;

    *)
      echo "nothing"
    ;;
  esac



Логические операторы
"""""""""""""""""""""""

Операторы используются для конструкции if-then-else-fi:

.. code-block:: bash

  -z       # строка пуста  
  -n       # строка не пуста  
  =, (==)  # строки равны  
  !=       # строки неравны  
  -eq      # равно  
  -ne      # неравно  
  -lt,(< ) # меньше  
  -le,(<=) # меньше или равно  
  -gt,(>)  # больше  
  -ge,(>=) # больше или равно  
   !       # отрицание логического выражения  
  -a,(&&)  # логическое «И»  
  -o,(||)  # логическое «ИЛИ»  
